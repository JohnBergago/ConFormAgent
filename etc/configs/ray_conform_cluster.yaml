 # An unique identifier for the head node and workers of this cluster.
cluster_name: ray_conform_cluster

## NOTE: Typically for local clusters, min_workers == max_workers == len(worker_ips).

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
# Typically, min_workers == max_workers == len(worker_ips).
min_workers: 1

# The maximum number of workers nodes to launch in addition to the head node.
# This takes precedence over min_workers.
# Typically, min_workers == max_workers == len(worker_ips).
max_workers: 1

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

idle_timeout_minutes: 5

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled. Assumes Docker is installed.
docker:
    image: "" # e.g., tensorflow/tensorflow:1.5.0-py3
    container_name: "" # e.g. ray_docker
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options: []  # Extra options to pass into "docker run"

# Local specific configuration.
provider:
    type: local
    head_ip: florian-laptop
    worker_ips: [florian-pc]

# How Ray will authenticate with newly launched nodes. In order to run this with the
# start_cluster.sh the field ssh_user should be set to user.
auth:
    ssh_user: user
    ssh_private_key: ~/.ssh/id_rsa

available_node_types:
    ray.head.default:
        resources: {"CPU": 4, "GPU": 1}
        min_workers: 0
        max_workers: 0
        # Leave this empty
        node_config: {}
    ray.worker.default:
        resources: {}
        ## NOTE: Typically for local clusters, max_workers == len(worker_ips).
        min_workers: 1
        max_workers: 1
        # Leave this empty
        node_config: {}
head_node_type: ray.head.default

# Leave this empty.
head_node: {}

# Leave this empty.
worker_nodes: {}

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
   "CONFORM_PROJ_DIR/opt/ConFormSim/build": "CONFORM_PROJ_DIR/opt/ConFormSim/build",
    "/tmp/current_branch_sha": "CONFORM_PROJ_DIR/.git/refs/heads/main",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up each nodes.
setup_commands:
    - test -e ConFormAgent || ( git clone https://github.com/JohnBergago/ConFormAgent.git && ./ConFormAgent/setup.sh )
    - cd ConFormAgent && git fetch && git checkout `cat /tmp/current_branch_sha`
    - . CONFORM_PROJ_DIR/env.sh


# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
# export RAY_BACKEND_LOG_LEVEL=info &&
# export CUDA_VISIBLE_DEVICES=0,1 &&
head_start_ray_commands: 
    - >-
        source CONFORM_PROJ_DIR/env.sh &&
        ulimit -c unlimited &&
        export DISPLAY=:1 &&
        ray stop &&
        ray start --head --port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - >-
        source CONFORM_PROJ_DIR/env.sh &&
        export DISPLAY=:0 &&
        ray stop &&  
        ray start --address=$RAY_HEAD_IP:6379 

